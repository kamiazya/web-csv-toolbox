name: CI
on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - run: |
          sudo apt-get update
          sudo apt-get install libstdc++-12-dev
      - name: Install latest
        uses: moonrepo/setup-rust@v1
        with:
          targets: wasm32-unknown-unknown
          channel: nightly
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: pnpm
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
      - name: Build
        run: pnpm run build
      - uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
  test_nodejs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - uses: pnpm/action-setup@v2
      with:
        version: 8
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: pnpm
    - name: Install latest
      uses: moonrepo/setup-rust@v1
      with:
        targets: wasm32-unknown-unknown
        channel: nightly
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    - run: pnpm install --frozen-lockfile
    - run: pnpm run build
    - run: pnpm test run

  test_deno:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v4
    - uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x
    - run: |
        deno eval '
        import { parse } from "./dist/es/web-csv-toolbox.js";

        const csv = `name,age
        Alice,42
        Bob,69`;

        for await (const record of parse(csv)) {
          console.log(record);
        }'

  test_linux_browser:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browsers:
          - chrome
          - firefox
    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt-get update
          sudo apt-get install libstdc++-12-dev
      - name: Install latest
        uses: moonrepo/setup-rust@v1
        with:
          targets: wasm32-unknown-unknown
          channel: nightly
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: npm test run -- --browser.name=${{ matrix.browsers }} --browser.headless

  test_macos_browser:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        browsers:
          - chrome
          - firefox
          # Headless Safari is currentry not supported
          # https://github.com/vitest-dev/vitest/blob/main/packages/browser/src/node/providers/webdriver.ts#L39-L41
          # - safari
    steps:
      - uses: actions/checkout@v3
      - name: Install latest
        uses: moonrepo/setup-rust@v1
        with:
          targets: wasm32-unknown-unknown
          channel: nightly
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: pnpm
      # - if: matrix.browsers == 'safari'
      #   run: sudo safaridriver --enable
      - run: pnpm install --frozen-lockfile
      - run: pnpm test run -- --browser.name=${{ matrix.browsers }} --browser.headless

  test_windows_browser:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        browsers:
          - chrome
          - firefox
          - edge
    steps:
      - uses: actions/checkout@v3
      - name: Install latest
        uses: moonrepo/setup-rust@v1
        with:
          targets: wasm32-unknown-unknown
          channel: nightly
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: pnpm
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - run: pnpm install --frozen-lockfile
      - run: pnpm test run -- --browser.name=${{ matrix.browsers }} --browser.headless

  check_nodejs:
    name: Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: pnpm
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
      - name: Check
        run: npx biome ci .
  check_rust:
    name: Check Rust
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - run: |
          sudo apt-get update
          sudo apt-get install libstdc++-12-dev
      - name: Install latest
        uses: moonrepo/setup-rust@v1
        with:
          targets: wasm32-unknown-unknown
          channel: nightly
          components: clippy,rustfmt
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - name: Run Clippy
        run: cargo clippy --manifest-path=./web-csv-toolbox-wasm/Cargo.toml --all-targets --all-features
        env:
          RUSTFLAGS: -D warnings
      - name: Run Fmt
        run: cargo fmt --manifest-path=./web-csv-toolbox-wasm/Cargo.toml --all -- --check

// Copy from https://github.com/nshen/vite-plugin-wasm-pack/blob/a6d261f55a0ef53eb4c277251c5d7391ee657bae/src/index.ts
// and edit for some improvements.
import { readFileSync, createReadStream } from "fs";
import fs from "fs/promises";
import path from "path";
import { PluginOption } from "vite";
import { dataToEsm } from "@rollup/pluginutils";

async function exists(filepath: string) {
  try {
    return !!(await fs.lstat(filepath));
  } catch (e) {
    return false;
  }
}

interface Options {
  /**
   * local crates paths, if you only use crates from npm, leave an empty array here.
   */
  crates: string[];
  /**
   * Emit wasm file to dist folder
   * @default true
   */
  copyWasm?: boolean;
}

function vitePluginWasmPack({
  crates,
  copyWasm = true,
}: Options): PluginOption {
  const prefix = "\0";
  const pkg = "pkg"; // default folder of wasm-pack module
  let baseDir: string;

  type CrateType = { path: string };
  // wasmfileName : CrateType
  // 'my_crate_bg.wasm': {path:'../../my_crate/pkg/my_crate_bg.wasm'}
  const wasmMap = new Map<string, CrateType>();
  for (const cratePath of crates) {
    // from ../../my-crate  ->  my_crate_bg.wasm
    const wasmFile = path.basename(cratePath).replace(/\-/g, "_") + "_bg.wasm";
    wasmMap.set(wasmFile, {
      path: path.join(cratePath, pkg, wasmFile),
    });
  }

  return {
    name: "vite-plugin-wasm-pack",
    enforce: "pre",
    configResolved(resolvedConfig) {
      baseDir = resolvedConfig.base;
    },

    resolveId(id: string) {
      for (const cratePath of crates) {
        const crateName = path.basename(cratePath);
        if (id.startsWith(crateName)) return prefix + id;
      }
      return null;
    },
    async load(id: string) {
      if (id.indexOf(prefix) === 0) {
        id = id.replace(prefix, "");
        if (id.endsWith(".wasm")) {
          const file = await fs.readFile(path.join("./node_modules", id));
          const base64 = file.toString("base64");
          return dataToEsm(`data:application/wasm;base64,${base64}`);
        }
        const modulejs = path.join(
          "./node_modules",
          id,
          id.replace(/\-/g, "_") + ".js",
        );
        const code = await fs.readFile(modulejs, {
          encoding: "utf-8",
        });
        return code;
      }
    },

    async buildStart(_inputOptions) {
      for await (const cratePath of crates) {
        const pkgPath = path.join(cratePath, pkg);
        const crateName = path.basename(cratePath);

        // build pkg if not exists
        if ((await exists(pkgPath)) === false) {
          console.error(
            `Error: Can't find ${pkgPath}, run wasm-pack build ${cratePath} --target web first`,
          );
        }
        // copy pkg generated by wasm-pack to node_modules
        try {
          await fs.cp(pkgPath, path.join("node_modules", crateName), {
            recursive: true,
          });
        } catch (error) {
          this.error(`copy crates failed: ${error}`);
        }
        // replace default load path with '/assets/xxx.wasm'
        const jsName = crateName.replace(/\-/g, "_") + ".js";

        /**
         * if use node module and name is '@group/test'
         * cratePath === '@group/test'
         * crateName === 'test'
         */

        let jsPath = path.join("./node_modules", crateName, jsName);
        const regex = /input = new URL\('(.+)'.+;/g;
        let code = await fs.readFile(path.resolve(jsPath), {
          encoding: "utf-8",
        });
        code = code.replace(regex, (_match, group) => {
          return `input = "${path.posix.join(baseDir, group)}"`;
        });
        await fs.writeFile(jsPath, code);
      }
    },

    configureServer(server) {
      server.middlewares.use((req, res, next) => {
        if (req.url && /\.wasm?$/.test(req.url)) {
          const basename = path.basename(req.url);
          const entry = wasmMap.get(basename);
          if (entry) {
            res
              .setHeader("Content-Type", "application/wasm")
              .setHeader(
                "Cache-Control",
                "no-cache, no-store, must-revalidate",
              );
            createReadStream(entry!.path).pipe(res);
            return;
          }
        }
        next();
      });
    },

    buildEnd() {
      if (copyWasm) {
        for (const [fileName, crate] of wasmMap.entries()) {
          this.emitFile({
            type: "asset",
            fileName: fileName,
            source: readFileSync(crate.path),
          });
        }
      }
    },
  };
}

export default vitePluginWasmPack;
